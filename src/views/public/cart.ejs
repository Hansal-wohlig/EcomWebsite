<%- include("../partials/header") %>
<link rel="stylesheet" href="/css/styles.css">

<script>
  // Add cart-page class to body for specific styling
  document.body.classList.add('cart-page');
</script>
<video class="video-bg" autoplay muted loop>
  <source src="/videos/product-brochure.mp4" type="video/mp4">
  Your browser does not support HTML5 video.
</video>

<div class="cart-container">
  <h1>üõí Your Cart</h1>

  <% if (cart && cart.items.length > 0) { %>
    <% cart.items.forEach(item => { %>
      <% if (item.product) { %>
        <div class="cart-item" data-product-id="<%= item.product._id %>">
          <div class="cart-item-info">
            <h3><%= item.product.title %></h3>
            <p>‚Çπ<%= item.price.toLocaleString() %> √ó <%= item.quantity %></p>
          </div>
          <form method="POST" action="/api/cart/remove-one" style="display: inline; margin-right: 0.5rem;">
            <input type="hidden" name="productId" value="<%= item.product._id %>">
            <button type="button" onclick="removeOneItem('<%= item.product._id %>')" style="background: linear-gradient(135deg, #f59e0b, #d97706);">‚ûñ One</button>
          </form>
          <form method="POST" action="/api/cart?_method=DELETE" style="display: inline;">
            <input type="hidden" name="productId" value="<%= item.product._id %>">
            <button type="button" onclick="removeAllItems('<%= item.product._id %>')">üóëÔ∏è All</button>
          </form>
        </div>
      <% } %>
    <% }) %>

    <div class="total">
      <strong>Total: ‚Çπ<span id="cartTotal"><%= cart.totalPrice.toLocaleString() %></span></strong>
    </div>
    

  <% } else { %>
    <div class="empty-cart">
      <p>Your cart is empty. Start shopping to add some amazing products!</p>
      <a href="/products">Browse Products</a>
    </div>
  <% } %>
  <button id="checkout-btn" class="btn btn-primary">Proceed to Checkout</button>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  const STRIPE_PUBLISHABLE_KEY = "<%= STRIPE_PUBLISHABLE_KEY %>";
  console.log("Stripe Key:", STRIPE_PUBLISHABLE_KEY); // Debug
document.addEventListener('DOMContentLoaded', function() {
  const checkoutBtn = document.getElementById('checkout-btn');
  if (checkoutBtn) {
    checkoutBtn.onclick = async function() {
      console.log('Checkout button clicked');
      const cartRes = await fetch('/api/cart');
      const cart = await cartRes.json();
      console.log('Cart:', cart);

      if (!cart.items || cart.items.length === 0) {
        alert('Your cart is empty or you are not logged in.');
        return;
      }

      console.log('About to fetch Stripe session');
      const response = await fetch('/checkout/create-checkout-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cartItems: cart.items.map(item => ({
          name: item.product.title,
          price: item.price,
          quantity: item.quantity
        })) })
      });
      console.log('Stripe session response:', response);

      const data = await response.json();
      console.log('Stripe session id:', data.id);

      if (!data.id) {
        alert('Failed to create Stripe session');
        return;
      }

      const stripe = Stripe(STRIPE_PUBLISHABLE_KEY); // Use env key
      stripe.redirectToCheckout({ sessionId: data.id });
    }
  } else {
    console.log('Checkout button not found');
  }
});

  async function removeOneItem(productId) {
    try {
      const response = await fetch('/api/cart/remove-one', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });

      const result = await response.json();
      
      if (result.success) {
        // Update cart count in header
        const cartCount = document.getElementById('cartCount');
        if (cartCount) {
          cartCount.textContent = result.cartItemCount;
        }
        
        // Update total
        const cartTotal = document.getElementById('cartTotal');
        if (cartTotal) {
          cartTotal.textContent = result.totalPrice.toLocaleString();
        }
        
        // Reload the page to show updated cart
        location.reload();
      } else {
        alert('Error: ' + result.message);
      }
    } catch (error) {
      console.error('Error removing item:', error);
      alert('Failed to remove item from cart');
    }
  }

  async function removeAllItems(productId) {
    if (!confirm('Are you sure you want to remove all items of this product?')) {
      return;
    }
    
    try {
      const response = await fetch('/api/cart/remove-all', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });

      const result = await response.json();
      
      if (result.success) {
        // Update cart count in header
        const cartCount = document.getElementById('cartCount');
        if (cartCount) {
          cartCount.textContent = result.cartItemCount;
        }
        
        // Update total
        const cartTotal = document.getElementById('cartTotal');
        if (cartTotal) {
          cartTotal.textContent = result.totalPrice.toLocaleString();
        }
        
        // Reload the page to show updated cart
        location.reload();
      } else {
        alert('Error: ' + result.message);
      }
    } catch (error) {
      console.error('Error removing product:', error);
      alert('Failed to remove product from cart');
    }
  }
</script>

<%- include("../partials/footer") %>
